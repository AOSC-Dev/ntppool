# -*- cperl -*-
eval 'exec $CBROOT/bin/perl $0 ${1+"$@"}'
  unless $running_under_some_shell;
use strict;
use lib "$ENV{CBROOTLOCAL}/lib";
use lib "$ENV{CBROOT}/lib";
use Combust::DB;
use Combust::Config;
use List::Util qw(shuffle);
use Net::hostent;
use Net::NTP;
use Socket;
use Time::HiRes;
use Data::Dumper;
use Sys::Hostname qw(hostname);
use Geo::IP;
use Net::IP;
use LWP::Simple;
use Email::Simple;
use Email::Date;
use Email::Send 'SMTP';

my $gi = Geo::IP->new(GEOIP_STANDARD);

use NP::Model;

use constant LOGFILE => "$ENV{CBROOTLOCAL}/log";

my $pool_domain = Combust::Config->new->site->{ntppool}->{pool_domain}
  or die "pool_domain configuration not setup";

$Net::NTP::TIMEOUT = 2;

my $db;

# exit handler
sub closedbconnection {
    $db->rollback();
    $db->disconnect();
}

# tools
sub ntpdate {
    my ($host, $error) = @_;

    my %ntp = eval { get_ntp_response($host); };
    warn Data::Dumper->Dump([\%ntp]);

    my @error;

    $ntp{Stratum} ||= '';
    push @error, "Bad stratum: $ntp{Stratum}"
      unless $ntp{Stratum}
      and $ntp{Stratum} < 6;

    if (@error) {
        print @error, "\n";
        my @query = `ntpdate -q $host 2>&1`
          or die "Error in command execution: ntpdate\n";
        print @query;

        return undef;
    }

    return 1;
}


sub logsay { 
    my $msg = join " ", @_;
    open LOG, ">>" . LOGFILE
      or die "Opening log (" . LOGFILE . "): $!\n";
    my (undef, undef, undef, $d, $m, $y, undef) = localtime time;
    printf LOG "%04d%02d%02d clockmaster %s\n", $y + 1900, $m + 1, $d, $msg;
    close LOG;
}

sub server_information {
    my $server = shift;
    my @zones  = $server->zones_display;
    my @r;
    push @r, sprintf "IP: %s, ID: %i, username: %s email: %s\n",
      $server->ip,
      $server->id,
      $server->admin->username ? $server->admin->username : "-",
      $server->admin->email; 
    push @r, sprintf "score: %.1f, in pool: %i, in server list: %i\n", $server->score, $server->in_pool, $server->in_server_list;
    push @r, "Hostname: " . $server->hostname . "\n";
    my $gi = Geo::IP->new(GEOIP_STANDARD);
    my $country = $gi->country_code_by_addr($server->ip);
    $country = lc $country if $country;
    push @r, "Country: $country  -  " if $country;
    push @r, "Netspeed: " . $server->netspeed . "\n";
    push @r, "Zones: ", join (", ", map { $_->name } @zones), "\n";
    push @r, sprintf "in_pool: %i, in_server_list: %i\n", $server->in_pool, $server->in_server_list;
    push @r, "Deletion on: ", $server->deletion_on->ymd, "\n" if $server->deletion_on;
    @r;
}

if ($#ARGV < 0) {
    die "pool add|report|scores|zone [<args>]\n";
}

# connect to the db
$db = Combust::DB::db_open('ntppool', {AutoCommit => 0})
  or die "Couldn't connect to database\n";

#$SIG{__DIE__} = \&closedbconnection;

my $cmd = shift @ARGV;
if ($cmd eq "add") {
    if ($#ARGV < 1) {
        die "pool add <email> <host or IP> [<zone ...>]\n";
    }

    # look if the email address is already registered
    my $email = shift @ARGV;
    my $user = NP::Model->user->fetch(email => $email);
    $user = NP::Model->user->fetch(username => $email) unless $user;
    $user = NP::Model->user->fetch(id => $email) unless $user;
    $user = NP::Model->user->fetch_or_create(email => $email) unless $user;
    $user->save;

    # do we have a hostname or an IP?
    my $hostname = shift @ARGV;
    my $ip;
    if (Net::IP::ip_is_ipv4($hostname)) {
        $ip       = $hostname;
        $hostname = undef;
    }
    else {
        my $addrs = gethostbyname($hostname)
          or die "$hostname does not resolve.\n";
        if ($#{$addrs->addr_list} > 0) {
            print "warning: $hostname has multiple IP addresses.\n";
        }
        $ip = inet_ntoa(${$addrs->addr_list}[0]);
    }

    # test the timeserver
    ntpdate $ip, "Bad server " . ($hostname ? $hostname : "") . "[$ip]:"
      or exit;

    my $server = NP::Model->server->fetch(ip => $ip); 
    if ($server) {
        die "server $ip already in database for ", $server->user->email, "\n";
    }

    $server = NP::Model->server->create
      (ip       => $ip,
       hostname => $hostname,
       user_id  => $user->id,
       in_pool  => 1,
      );

    for my $country (@ARGV) {
        $server->join_zone($country);
    }

    $server->save;

    unless (defined $hostname) { $hostname = $ip; }
    my $z = join " ", @ARGV;
    logsay($server->id . " add $email $hostname $z");

}
elsif ($cmd eq "edit") {
    my $arg = shift @ARGV or die "pool zones <host or IP>\n";
    my $server = NP::Model->server->find_server($arg);
    die "Could not find server $arg\n" unless $server;
    print server_information($server);
    my $changes = 0;
    while (my $k = shift @ARGV) {
        $changes++;
        print "\n";
        my $v = shift @ARGV;
        last unless defined $v;
        print "Set $k -> $v";
        if ($server->can($k)) {
            $server->$k($v);
        }
        else {
            die "Don\'t know how to set $k\n";
        }
    }
    if ($changes and $server->save(changes_only => 1) > 0) {
        print "\n\nUpdated =============\n";
        print server_information($server);
    }
}
elsif ($cmd eq "zones") {
    my $arg = shift @ARGV or die "pool zones <host or IP>\n";
    my $server = NP::Model->server->find_server($arg);
    die "Could not find server $arg\n" unless $server;
    print "\n";
    print server_information($server);
    my @zones  = $server->zones;
    for my $zone_name (@ARGV) {
        my @zones = $server->zones;
        if ($zone_name =~ s/^-//) {
            my ($zone) = grep { $_->name eq $zone_name } @zones;
            print "Could not find location '$zone_name' to delete\n" and next unless $zone;
            $server->leave_zone($zone_name);
        }
        else {
            $zone_name =~ s/^\+//;
            next if grep { $zone_name eq $_->name } @zones;
            my $zone = NP::Model->zone->fetch(name => $zone_name);
            print "Could not find '$zone_name'\n" and next unless $zone;
            $server->join_zone($zone);
        }
    }
    $server->save;

    @zones  = $server->zones_display;
    print "Zones: ", join (", ", map { $_->name } @zones), "\n";
}
elsif ($cmd eq "rm") {
    my $arg = shift @ARGV
      or die "pool rm <host or IP>\n";
    my $server = NP::Model->server->find_server($arg);
    die "Could not find server $arg\n" unless $server;
    my $server_desc = (join " / ", grep { defined $_ } $server->ip, $server->hostname);
    logsay($server->id, "rm", $server_desc);
    printf "%i, %s - %s\n", $server->id, $server_desc, $server->user->email;
    my $date = DateTime->today;
    $server->deletion_on($date);
    $server->add_logs
      ({ user_id => undef, 
         type    => 'delete',
         message => "Deletion scheduled for " . $date->ymd . " by pool admin"
       });
    $server->update;
}
elsif ($cmd eq "ip") {
    my ($from, $to) = @ARGV;
    $to or die "pool $cmd <host or IP> <IP>\n";
    my $server = NP::Model->server->find_server($from);
    die "Could not find server $from\n" unless $server;
    print server_information($server);
    my $server_desc = (join " / ", grep { defined $_ } $server->ip, $server->hostname);
    logsay($server->id, "ip", "$server_desc => $to");
    printf "%i, %s (%s) => %s\n", $server->id, $server_desc, $server->admin->email, $to;
    $server->add_logs
      ({ user_id => undef, 
         type    => 'ip_change',
         message => "IP change from " . $server->ip . " to $to",
       });
    $server->ip($to);
    $server->score_raw(0);
    $server->save;
}
elsif ($cmd eq "report") {

    my $rcpt = shift;

    my $config = Combust::Config->new;
    my $url = $config->base_url("ntppool") . "/bulletin";
    my $msg = get($url);

    die "no msg?!" unless $msg;

    my $head = "";

    $rcpt and $head = <<EOT;
From: $pool_domain monitoring script <clockmaster\@fortytwo.ch>
To: <$rcpt>
EOT

    #  timekeepers-bulletin@fortytwo.ch

    if ($rcpt) {
        my $email = Email::Simple->new($head . $msg);
        $email->header_set('Message-ID' => join("-", int(rand(1000)), $$, time) . '@' . hostname);
        $email->header_set('Date'       => Email::Date::format_date);

        my $return = send SMTP => $email, 'localhost';
    }
    else {
        print $msg;
    }

}
elsif ($cmd eq "scores") {

    my $dbh = NP::Model->dbh;
    $dbh->selectrow_array(q[SELECT GET_LOCK("scores", 0)]) or exit;

    # check if this machine has good time.
    $Net::NTP::CLIENT_TIME_SEND    = undef;
    $Net::NTP::CLIENT_TIME_RECEIVE = undef;
    my $mon_host = 'localhost';
    $mon_host = 'gps.bn.dev' if hostname =~ m/bn.dev$/; # development only
    my %pkt = get_ntp_response($mon_host);
    if ($pkt{'Stratum'} == 0 or $pkt{'Stratum'} > 6) {
        die "monitoring server not synchronized\n";
    }

    # and if we're connected
    $Net::NTP::CLIENT_TIME_SEND    = undef;
    $Net::NTP::CLIENT_TIME_RECEIVE = undef;
    %pkt = eval { get_ntp_response('clock-a.develooper.com'); };
    if ($pkt{'Stratum'} == 0 or $pkt{'Stratum'} > 6) {
        $Net::NTP::CLIENT_TIME_SEND    = undef;
        $Net::NTP::CLIENT_TIME_RECEIVE = undef;
        %pkt = eval { get_ntp_response('clock-b.develooper.com'); };
        if ($pkt{'Stratum'} == 0 or $pkt{'Stratum'} > 6) {
            die "no time from clock-a or clock-b\n";
        }
    }

    # go through server array and fetch offset for all servers
    my $servers = NP::Model->server->get_check_due;

    for my $server (@$servers) { 

        my $step = 0;

        $server->score_raw( $server->score_raw * 0.95 );

        #printf "testing %s\n", $server->ip;

        # do multiple requests to trigger servers with too agressive anti-abuse measures
        if ($server->ip eq '84.92.75.21' or $server->ip eq '131.107.1.10') {
            eval {
                get_ntp_response($server->ip);
                sleep rand(2);
                get_ntp_response($server->ip);
                sleep rand(1);
                get_ntp_response($server->ip); 
                get_ntp_response($server->ip); 
                get_ntp_response($server->ip); 
                if (rand(10) > 4) {
                    get_ntp_response($server->ip); 
                    get_ntp_response($server->ip); 
                }
        }; 
    }

        # fetch offset by ntp
        # if a server is not good, query a second time
        # and use the second result - this is said to solve problems with some
        # crappy Internet access routers.
        my $offset = undef;
        for (my $i = 0 ; $step != 1 and $i < 2 ; $i++) {
            $Net::NTP::CLIENT_TIME_RECEIVE = undef;
            my $time_then = Time::HiRes::time;
            $Net::NTP::CLIENT_TIME_SEND = $time_then;

            my %pkt      = eval { 
                get_ntp_response($server->ip);
            };
            my $time_now = Time::HiRes::time;

            if (!$pkt{Stratum} or $!) {
                $step = -5;
            }
            else {
                my $recv_org   = $pkt{'Receive Timestamp'} - $time_now;
                my $trans_dest = $pkt{'Transmit Timestamp'} - $time_then;
                $offset = ($recv_org + $trans_dest) / 2;
                my $offset_abs = abs($offset);
                if ($offset_abs > 3 or $pkt{Stratum} > 5) {
                    $step = -4;
                }
                elsif ($offset_abs > 1.5) {
                    $step = -2;
                }
                elsif ($offset_abs > 0.1) {
                    $step = -2 * $offset_abs + 1;
                }
                else {
                    $step = 1;
                }
            }

            $server->stratum($pkt{Stratum}) if $pkt{Stratum};
        }

        # local $Rose::DB::Object::Debug = $Rose::DB::Object::Manager::Debug = 1;

        $server->score_raw( $server->score_raw + $step );
        $server->score_ts('now');

        $server->add_log_scores({score  => $server->score,
                                 step   => $step,
                                 offset => $offset,
                                });
        $server->save(cascade => 1);

    }
}
elsif ($cmd eq "zone") {

    my $file = "$ENV{CBROOTLOCAL}/dns/$pool_domain";
    open(my $fh, ">$file.tmp") or die "Could not open $file.tmp: $!";

    open HEAD, "<header"
      or die "Opening DNS zone file header (header): $!\n";
    print $fh "# ATTENTION\n# This is a generated file\n#\n";
    my $t = time;
    while (<HEAD>) {
        s/\@VERSION\@/$t/;
        print $fh $_;
    }
    close HEAD;

    my $vendordir = "vendordns";
    opendir my $dir, $vendordir or die "could not open '$vendordir' dir: $!";
    my @vendor_files = grep { $_ !~ /\~$/ and -f $_ } map { "$vendordir/$_" } readdir($dir);
    closedir $dir;
    
    # temporary hack to disable the hardcoded vendor files for
    # development sandboxes
    @vendor_files = () unless $pool_domain eq 'pool.ntp.org'; 

    for my $file (@vendor_files) {
       open my $vfh, $file or die "could not open $file: $!";
       while (<$vfh>) {
         last if m/^--/;
         print $fh $_; 
       }
       close $vfh;
    }


    my $zones = NP::Model->vendor_zone->get_vendor_zones_iterator
      ( query => [ status => 'Approved' ],
        order => 'approved_on', 
      );


    my $ttl = 2700;

    while (my $zone = $zones->next) {
        my $name = $zone->zone_name;
        for my $i (0..3) {
            print $fh "C$i.$name.${pool_domain}:$i.vendors.${pool_domain}:$ttl\n";
        }
    }

    $zones = NP::Model->zone->get_zones_iterator( query => [ dns => 1 ] );

    while (my $zone = $zones->next) {
        my $name = $zone->name;
	$name = '' if $name eq '@';
	$name = "$name." if $name;

        my $entries =
          $db->selectall_arrayref
            (
             q[SELECT s.ip 
               FROM servers s, server_zones l 
               WHERE l.server_id = s.id AND l.zone_id = ? AND s.in_pool = 1 
               AND s.score_raw > 5
               and (s.deletion_on IS NULL OR s.deletion_on > DATE_ADD(NOW(), interval ? day))
              ], undef, $zone->id, NP::Model::Zone->deletion_grace_days);

        next unless $entries and @$entries;

        my $min_non_duplicate_size = 4;
        $min_non_duplicate_size = int(@$entries / 5) 
          if (@$entries / 5 > $min_non_duplicate_size);
        $min_non_duplicate_size = 14 if $min_non_duplicate_size > 14;

        print $fh "# " . scalar @$entries . " active servers in ", $zone->name, "\n";

        if ($#$entries < ($min_non_duplicate_size*5 - 1)) {
            print $fh "# possible duplicates in the zones below (", $zone->name, ")\n";
            foreach my $z (("", "0.", "1.", "2.", "3.")) {
                @$entries = shuffle(@$entries);
                my $i;
                foreach my $e (@$entries) {
                    print $fh "+$z${name}${pool_domain}:$$e[0]:$ttl\n";
                    $i++;
                    last if ($i >= 12);
                }
            }
        }
        else {
            print $fh "# 'big' zone without duplicates below (", $zone->name, ")\n";
            @$entries = shuffle(@$entries);
            foreach my $z (("", "0.", "1.", "2.", "3.")) {
                for (my $i = 0 ; $i < $min_non_duplicate_size; $i++) {
                    print $fh "+$z${name}${pool_domain}:", ${shift @$entries}[0], ":$ttl\n";
                }
            }
        }
    }
    close $fh or die "could not close $file.tmp: $!";
    rename "$file.tmp", "$file.tinydns" or die "could not rename $file.tmp to $file.tinydns: $!";
}
else {
    die "Unknown command: $cmd\n";
}

#$db->commit() or die "Error on commit\n";
$SIG{__DIE__} = 'DEFAULT';
$db->disconnect();

    
