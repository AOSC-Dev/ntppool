#!/usr/bin/env perl
use strict;
use Net::NTP;
use LWP;
use Time::HiRes;
$Net::NTP::TIMEOUT = 2;

my $poolserver = "http://www.pool.ntp.org/monitor";

my $verbose = 0;
if (@ARGV[0] eq '-v') {
    $verbose = 1;
    shift;
}

if ($#ARGV < 0 || ((@ARGV[0] != "v4") && (@ARGV[0] != "v6"))) {
    die "monitor [-v] (v4|v6) [poolserver]\n";
}


# check if this machine has good time.
$Net::NTP::CLIENT_TIME_SEND    = undef;
$Net::NTP::CLIENT_TIME_RECEIVE = undef;
my $mon_host = 'localhost';
my %pkt = eval { get_ntp_response($mon_host) };
if (!$pkt{'Stratum'} or $pkt{'Stratum'} == 0 or $pkt{'Stratum'} > 6) {
    die "monitoring server not synchronized\n";
}

# and if we're connected
$Net::NTP::CLIENT_TIME_SEND    = undef;
$Net::NTP::CLIENT_TIME_RECEIVE = undef;
%pkt                           = eval { get_ntp_response('ntp1.us.grundclock.com'); };
if ($pkt{'Stratum'} == 0 or $pkt{'Stratum'} > 6) {
    $Net::NTP::CLIENT_TIME_SEND    = undef;
    $Net::NTP::CLIENT_TIME_RECEIVE = undef;
    %pkt                           = eval { get_ntp_response('clock-b.develooper.com'); };
    if ($pkt{'Stratum'} == 0 or $pkt{'Stratum'} > 6) {
	die "no time from ntp1 or clock-b\n";
    }
}

my $proto = shift @ARGV;
$poolserver = shift @ARGV unless $#ARGV < 0;
my $url = $poolserver . "/" . $proto;

my $browser = LWP::UserAgent->new;

my $response = $browser->get($url);
die "$url error:", $response->status_line unless $response->is_success;
my $hosts = $response->content;
my @hosts = split(/\n/, $hosts);

my $status = "";
for my $server (@hosts) {
        # fetch offset by ntp
        # if a server is not good, query a second time
        # and use the second result - this is said to solve problems with some
        # crappy Internet access routers.
        my $offset = undef;
	my $stratum;
	if ($verbose) {
	    print "Trying ", $server;
	}
        for (my $i = 0; !defined($offset) and $i < 2; $i++) {
            $Net::NTP::CLIENT_TIME_RECEIVE = undef;
            my $time_then = Time::HiRes::time;
            $Net::NTP::CLIENT_TIME_SEND = $time_then;

            my %pkt = eval { get_ntp_response($server); };
            my $time_now = Time::HiRes::time;

            if (!$pkt{Stratum} or $!) {
		# unreachable; leave offset as-is
            }
            else {
                my $recv_org   = $pkt{'Receive Timestamp'} - $time_now;
                my $trans_dest = $pkt{'Transmit Timestamp'} - $time_then;
                $offset = ($recv_org + $trans_dest) / 2;
		$stratum = $pkt{Stratum};
            }
        }
	
	if (defined($offset)) {
	    $status .= sprintf("%s %f %d\n", $server, $offset, $stratum);
	    if ($verbose) {
		print " ", $offset, "\n";
	    }
	} else {
	    $status .= sprintf("%s unreachable\n", $server);
	    if ($verbose) {
		print " unreachable\n";
	    }
	}
}

$response = $browser->post($url, Content_Type => 'form-data',
			   Content => [stats => $status,]);
die "$url error:", $response->status_line unless $response->is_success;
if ($verbose) {
    print $response->content, "\n";
}
