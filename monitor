#!/usr/bin/env perl
use strict;
use Net::NTP;
use LWP;
use Time::HiRes;
use JSON qw(decode_json encode_json);

my $VERSION = "0.1";

$Net::NTP::TIMEOUT = 2;

my $api_key     = shift or die "$0 [api_key] [pool-server]\n";
my $pool_server = shift || "http://www.pool.ntp.org/monitor";

$pool_server .= '?api_key=' . $api_key;

my $verbose = 1;

# check if this machine has good time.
$Net::NTP::CLIENT_TIME_SEND    = undef;
$Net::NTP::CLIENT_TIME_RECEIVE = undef;
my $mon_host = 'localhost';
my %pkt = eval { get_ntp_response($mon_host) };
if (!$pkt{'Stratum'} or $pkt{'Stratum'} == 0 or $pkt{'Stratum'} > 6) {
    die "monitoring server not synchronized\n";
}

#use Data::Dump qw(pp);
#pp(\%pkt);

# TODO: check the offset, too, with "ntpdc -c loopinfo" or "ntpq -c rv";
# probably use the Capture::Tiny module to make it easy.
# See https://github.com/abh/ntppool/issues/11


# and if we're connected
$Net::NTP::CLIENT_TIME_SEND    = undef;
$Net::NTP::CLIENT_TIME_RECEIVE = undef;
%pkt                           = eval { get_ntp_response('tick.ucla.edu'); };
if ($pkt{'Stratum'} == 0 or $pkt{'Stratum'} > 6) {
    $Net::NTP::CLIENT_TIME_SEND    = undef;
    $Net::NTP::CLIENT_TIME_RECEIVE = undef;
    %pkt                           = eval { get_ntp_response('clock-b.develooper.com'); };
    if ($pkt{'Stratum'} == 0 or $pkt{'Stratum'} > 6) {
	die "no time from ntp1 or clock-b\n";
    }
}

my $ua = LWP::UserAgent->new;
$ua->agent("NTPPool-Monitor/$VERSION");

my $response = $ua->get($pool_server);

my $data = eval { decode_json($response->content) } || {};
my $err = $@;

if (!$response->is_success or $data->{error} or $err) {
    die "$pool_server error: ", $response->status_line, "\n",
    ( $data->{error} ? "Server Response: " . $data->{error} . "\n" : () ),
    ( $err ? "Data decoding error: $err\n" . $response->content . "\n" : () );
} 

die "Could not decode data" unless $data; 

my @hosts = @{ $data->{servers} };

my @status;

for my $server (@hosts) {

    my $offset;
    my $stratum;

    # Try twice
    for (my $i = 0; !defined($offset) and $i < 2; $i++) {
        $Net::NTP::CLIENT_TIME_RECEIVE = undef;
        my $time_then = Time::HiRes::time;
        $Net::NTP::CLIENT_TIME_SEND = $time_then;
        
        my %pkt = eval { get_ntp_response($server); };
        my $time_now = Time::HiRes::time;
        
        if (!$pkt{Stratum} or $!) {
            # unreachable; leave offset as-is
        }
        else {
            my $recv_org   = $pkt{'Receive Timestamp'} - $time_now;
            my $trans_dest = $pkt{'Transmit Timestamp'} - $time_then;
            $offset = ($recv_org + $trans_dest) / 2;
            $stratum = $pkt{Stratum};
        }
    }
    
    if (defined($offset)) {
        push @status, { server  => $server,
                        offset  => $offset,
                        stratum => $stratum,
        };
    } else {
        push @status, { server => $server,
                        no_response => 1,
        };
    }
}

print encode_json(\@status);

$response = $ua->post($pool_server, Content_Type => 'application/json',
                      Content => encode_json({ status => \@status }));

die "$pool_server error:", $response->status_line unless $response->is_success;
if (1 or $verbose) {
    print "posted\n";
    print $response->content, "\n";
}
