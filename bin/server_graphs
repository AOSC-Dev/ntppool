# -*- cperl -*-
eval 'exec $CBROOT/bin/perl $0 ${1+"$@"}'
  unless $running_under_some_shell;
use strict;
use warnings;
use lib "$ENV{CBROOTLOCAL}/lib", "$ENV{CBROOT}/lib";

my $rrd_path = "$ENV{CBROOTLOCAL}/rrd/server";

use NTPPool::Server;
use NTPPool::Server::LogScore;

my $populate_all = @ARGV and $ARGV[0] eq 'populate_all' ? 1 : 0;

my $servers = NTPPool::Server->retrieve_all;
while (my $server = $servers->next) { 
    if ($populate_all) {
        my $scores = NTPPool::Server::LogScore->search( server => $server, { order_by => 'ts' } );
        while (my $ls = $scores->next) {
            $ls->update_rrd;
        } 
    }

    #next unless $server->id >= 300; #  and $server->id < 370;
    update_graphs($server);
}

sub update_graphs {
    my $server = shift;


    my @defaults = (
                   #'--lazy',
                   '--end'    => 'now-4d',
                   '--start'  => 'end-10d', # 1123657000, # 2005-08-10, first data...  'end-14d',
                   '--width'  => 420,
                   '--height' => 130,
                   );

    offset_graph($server, \@defaults);
    score_graph($server, \@defaults);
}

sub score_graph {
    my ($server, $defaults) = @_;

    my $path = $server->graph_path('score');
    my $rrd  = $server->rrd_path;

    my $title = "Score history for " . $server->ip;

    my @options = (@$defaults,
                   '--title'  => $title,
                   '--lower-limit' => -10,
                   '--upper-limit' => 20,
                   '--alt-autoscale-max',
                   '--slope-mode',
                   qq[DEF:score=$rrd:score:AVERAGE],
                   qq[DEF:step=$rrd:step:AVERAGE],
                   q[CDEF:step_blue=step,1,LT,INF,0,IF],
                   q[CDEF:step_yellow=step,0.8,LT,INF,0,IF],
                   q[CDEF:step_orange=step,-0.9,LT,INF,0,IF],
                   q[CDEF:step_red=step,-3.9,LT,INF,0,IF],
                   q[CDEF:step_white=step,0,EQ,INF,0,IF],

                   qq[AREA:step_blue#9999FF:],
                   qq[AREA:step_yellow#EEEE99:],
                   qq[AREA:step_orange#FFAA55:],
                   qq[AREA:step_red#FF6666:],
                   qq[AREA:step_white#FFFFFF],
                   q[LINE2:5#660000:Bad server cutoff],
                   qq[LINE2:score#00BB00:Score],
#                   qq[LINE1:step#001100:Step],
                  );

    RRDs::graph $path, @options;
    my $ERROR = RRDs::error;
    if ($ERROR) {
        warn "$0: unable to create '$path': $ERROR\n";
    }
}


sub offset_graph {
    my ($server, $defaults) = @_;

    my $path = $server->graph_path('offset');
    my $rrd  = $server->rrd_path;

    my $title = "Offset history for " . $server->ip;

    my @options = (@$defaults,
                   '--width'  => 420,
                   '--height' => 130,
                   '--title'  => $title,
                   '--alt-autoscale-max',
                   '--slope-mode',
                   qq[DEF:score=$rrd:score:AVERAGE],
                   qq[DEF:offset_avg=$rrd:offset:AVERAGE],
                   qq[DEF:offset_top=$rrd:offset:MAX],
                   qq[DEF:offset_bot=$rrd:offset:MIN],
                   
                   #qq[CDEF:offset_top_smooth=offset_top,7200,TREND],
                   #qq[CDEF:offset_bot_smooth=offset_bot,7200,TREND],

                   q[CDEF:offset_area=offset_top,offset_bot,-],

                   q[LINE1:offset_bot#00FF00:Minimum offset],
                   q[AREA:offset_area#FFBFBF::STACK],  
                   q[LINE1:offset_top#FF0000:Maximum offset],
                   q[LINE1:offset_avg#000000:Offset],
                      
                  );

    RRDs::graph $path, @options;
    my $ERROR = RRDs::error;
    if ($ERROR) {
        warn "$0: unable to create '$path': $ERROR\n";
    }
}
